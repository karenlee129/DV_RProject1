geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from titanic where sex is not null"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_ryl96', PASS='orcl_ryl96', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df
summary(df)
head(df)
require(extrafont)
ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
#facet_wrap(~SURVIVED) +
#facet_grid(.~SURVIVED, labeller=label_both) + # Same as facet_wrap but with a label.
#facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Titanic') +
labs(x="Age", y=paste("Fare")) +
layer(data=df,
mapping=aes(x=as.numeric(as.character(AGE)), y=as.numeric(as.character(FARE)), color=SEX),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
---
title: "DV_RProject1"
author: "Ronly Leung, Karen Lee"
date: "September 15, 2015"
output: html_document
---
require("jsonlite")
require("RCurl")
require(extrafont)
require(ggplot2)
## Data Frames
df1 <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from titanic"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_kwl377', PASS='orcl_kwl377', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
head(df1)
summary(df1)
df2 <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from titanic where sex is not null"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_kwl377', PASS='orcl_kwl377', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
head(df2)
summary(df2)
df3 <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from titanic where age <= 10"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_kwl377', PASS='orcl_kwl377', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
head(df3)
summary(df3)
df4 <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from titanic where age > 50"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_kwl377', PASS='orcl_kwl377', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
head(df4)
summary(df4)
require("jsonlite")
require("RCurl")
require(extrafont)
require(ggplot2)
## Visualization 1
ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
labs(title='Titanic') +
labs(x="Age", y=paste("Fare")) +
layer(data=df1,
mapping=aes(x=suppressWarnings(as.numeric(as.character(AGE))),y=suppressWarnings(as.numeric(as.character(FARE))), color=SEX),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.3, height=0)
)
## SQL Query: select * from titanic
## This visualization shows each passenger's fare based on his/her age and sex (sex can be null).
## Visualization 2
ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
labs(title='Titanic') +
labs(x="Age", y=paste("Fare")) +
layer(data=df2,
mapping=aes(x=suppressWarnings(as.numeric(as.character(AGE))), y=suppressWarnings(as.numeric(as.character(FARE))), color=SEX),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.3, height=0)
)
## SQL Query: select * from titanic where sex is not null
## This visualization shows each passenger's fare based on his/her age and sex (sex can't be null).
## Visualization 3
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
labs(title='Titanic') +
labs(x="SURVIVED", y=paste("FARE")) +
layer(data=df2,
mapping=aes(x=SEX, y=as.numeric(as.character(FARE)), color=as.character(SURVIVED)),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.3, height=0)
)
## SQL Query: select * from titanic where sex is not null
## This visualization shows whether each passenger survived or not vs their fare, with the x-axis separated by sex.
## Visualization 4
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Titanic') +
labs(x="SURVIVED", y=paste("FARE")) +
layer(data=df2,
mapping=aes(x=as.character(SEX), y=as.numeric(as.character(FARE)), color=SEX),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.3, height=0)
)
## SQL Query: select * from titanic where sex is not null
## This visualization categorizes passengers by class and survival status, resulting in 6 different graphs. Each graph plots fare to sex.
## Visualization 5
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Titanic where age <= 10') +
labs(x="SURVIVED", y=paste("FARE")) +
layer(data=df3,
mapping=aes(x=as.character(SEX), y=as.numeric(as.character(FARE)), color=SEX),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.3, height=0)
)
## SQL Query: select * from titanic where age <= 10
## This visualization also categorizes passengers, 10 years and younger, by class and survival status, resulting in 6 different graphs. Each graph plots fare to sex.
## Our Own Creation!
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
labs(title='Titanic where age > 50') +
labs(x="SURVIVED", y=paste("AGE")) +
layer(data=df4,
mapping=aes(x=SEX, y=as.numeric(as.character(AGE)), color=as.character(SURVIVED)),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.3, height=0)
)
## SQL Query: select * from titanic where age > 50
## This visualization compares the age and survival status of passengers over the age of 50. The graph separates the passengers by sex.
## Visualization 1
ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
labs(title='Titanic') +
labs(x="Age", y=paste("Fare")) +
layer(data=df1,
mapping=aes(x=suppressWarnings(as.numeric(as.character(AGE))),y=suppressWarnings(as.numeric(as.character(FARE))), color=SEX),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
position=position_jitter(width=0.3, height=0)
)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
#facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Titanic') +
labs(x="SURVIVED", y=paste("FARE")) +
layer(data=df,
mapping=aes(x=SEX, y=as.numeric(as.character(FARE)), color=as.character(SURVIVED)),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from titanic where sex is not null"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df
summary(df)
head(df)
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
#facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Titanic') +
labs(x="SURVIVED", y=paste("FARE")) +
layer(data=df,
mapping=aes(x=SEX, y=as.numeric(as.character(FARE)), color=as.character(SURVIVED)),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
require("ggplot2")
require("ggthemes")
require("gplots")
require("grid")
require("RCurl")
require("reshape2")
require("tableplot")
require("tidyr")
require("dplyr")
require("jsonlite")
require("extrafont")
require("lubridate")
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
#facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Titanic') +
labs(x="SURVIVED", y=paste("FARE")) +
layer(data=df,
mapping=aes(x=SEX, y=as.numeric(as.character(FARE)), color=as.character(SURVIVED)),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
require(extrafont)
ggplot() +
coord_cartesian() +
scale_x_continuous() +
scale_y_continuous() +
#facet_wrap(~SURVIVED) +
#facet_grid(.~SURVIVED, labeller=label_both) + # Same as facet_wrap but with a label.
facet_grid(PCLASS~SURVIVED, labeller=label_both) +
labs(title='Titanic') +
labs(x="Age", y=paste("Fare")) +
layer(data=df,
mapping=aes(x=as.numeric(as.character(AGE)), y=as.numeric(as.character(FARE)), color=SEX),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
)
FigureNum <<- 0 # Global variable
ggplot_func <- function(df,
Title = "Diamonds",
Legend = "color",   # Notice how this is handled below using the aes_string() function
PointColor = c("red", "blue", "green", "yellow", "grey", "black", "purple"), # See https://groups.google.com/forum/#!forum/ggplot2 for color choices.
Sizes = c(.5,.5,.5,.5,.5,.5,.5,.5),
AxisSize = 12,
TitleSize = 16,
LegendSize = 14,
YMin = 0,
YMax = max(df$price) * 1.1,
XMin = 0,
XMax = max(df$carat) * 1.1,
YLabel = 'price',
XLabel = 'carat',
Background = "grey97",
MinorGridColor = "snow2",
MajorGridColor = "snow3",
MinorGridSize = .5,
MajorGridSize = .5,
FigNum = -1,
FigNumOffset = 0
) {
if(FigNum != -1) FigNum = FigNum
else FigNum = {
FigureNum <<- FigureNum + 1
}
names(df)[names(df) == Legend] <- 'Legend'
p1 = ggplot() +
coord_cartesian() +
scale_x_continuous(breaks=c(seq(XMin,XMax,by=1)), minor_breaks=seq(XMin,XMax,by=1))  +
#scale_x_discrete() +
scale_y_continuous() +
scale_y_discrete() +
scale_colour_manual(values = PointColor) + # See http://docs.ggplot2.org/0.9.3.1/scale_manual.html for more information.
scale_color_discrete(name=Legend) + # This is not on the ggplot Cheat Sheet by the way.
#facet_wrap(~cut) +
#facet_grid(clarity~cut, labeller=label_both) +
labs(y = YLabel, x = paste(XLabel, '\nFigure', toString(FigNumOffset + FigNum)), title=Title) +
ylim(YMin, YMax) + xlim(XMin, XMax) +
# theme is now used, see http://docs.ggplot2.org/0.9.2.1/theme.html for more information.
theme(legend.text = element_text(size = LegendSize, face = "bold")) + # see http://www.cookbook-r.com/Graphs/Legends_(ggplot2) for more information.
theme(axis.text=element_text(size=12), axis.title=element_text(size=AxisSize,face="bold")) +
theme(plot.title = element_text(size=TitleSize,face="bold")) +
theme(panel.grid.major = element_line(colour=MajorGridColor, size=MajorGridSize)) +
theme(panel.grid.minor = element_line(colour=MinorGridColor, size=MinorGridSize)) +
theme(panel.background = element_rect(fill=Background, colour=Background)) +
layer(data=df,
# None of these worked for the following non-commented line:
#mapping=aes(x = carat, y = price, color = Legend),
#mapping=aes(x = carat, y = price, aes_string(color = Legend)),
#mapping=aes(x = carat, y = price, color = substitute(Legend))
# See http://stackoverflow.com/questions/32503843/using-a-function-parameter-in-ggplot-mapping-aes
# I fixed it by doing the names(df)[names(df) == Legend] <- 'Legend' above.
mapping=aes(x = carat, y = price, color = Legend),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
#position=position_dodge()
)
return(p1)
}
p1 <- ggplot_func(diamonds)
p1
p1
p2 <- ggplot_func(diamonds, YMin = 5000, YMax = 15000)
p2
p3 <- ggplot_func(subset(diamonds, cut == "Premium"), Legend = "cut")
p3
p4 <- ggplot_func(diamonds, Legend = "clarity", PointColor = c("red", "blue", "green", "yellow", "grey", "black", "purple", "orange"))
p4
library("grid")
# You may need to use getwd() to find out where the "4diamonds.png" file will be put.
# You can use setwd() to set the current working directory.
png("4diamonds.png", width = 25, height = 20, units = "in", res = 72)
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
# Print Plots
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(p3, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
print(p4, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))
dev.off()
FigureNum <<- 0 # Global variable
ggplot_func <- function(df,
Title = "Diamonds",
Legend = "color",   # Notice how this is handled below using the aes_string() function
PointColor = c("red", "blue", "green", "yellow", "grey", "black", "purple"), # See https://groups.google.com/forum/#!forum/ggplot2 for color choices.
Sizes = c(.5,.5,.5,.5,.5,.5,.5,.5),
AxisSize = 12,
TitleSize = 16,
LegendSize = 14,
YMin = 0,
YMax = max(df$price) * 1.1,
XMin = 0,
XMax = max(df$carat) * 1.1,
YLabel = 'price',
XLabel = 'carat',
Background = "grey97",
MinorGridColor = "snow2",
MajorGridColor = "snow3",
MinorGridSize = .5,
MajorGridSize = .5,
FigNum = -1,
FigNumOffset = 0
) {
if(FigNum != -1) FigNum = FigNum
else FigNum = {
FigureNum <<- FigureNum + 1
}
names(df)[names(df) == Legend] <- 'Legend'
p1 = ggplot() +
coord_cartesian() +
scale_x_continuous(breaks=c(seq(XMin,XMax,by=1)), minor_breaks=seq(XMin,XMax,by=1))  +
#scale_x_discrete() +
scale_y_continuous() +
scale_y_discrete() +
scale_colour_manual(values = PointColor) + # See http://docs.ggplot2.org/0.9.3.1/scale_manual.html for more information.
scale_color_discrete(name=Legend) + # This is not on the ggplot Cheat Sheet by the way.
#facet_wrap(~cut) +
#facet_grid(clarity~cut, labeller=label_both) +
labs(y = YLabel, x = paste(XLabel, '\nFigure', toString(FigNumOffset + FigNum)), title=Title) +
ylim(YMin, YMax) + xlim(XMin, XMax) +
# theme is now used, see http://docs.ggplot2.org/0.9.2.1/theme.html for more information.
theme(legend.text = element_text(size = LegendSize, face = "bold")) + # see http://www.cookbook-r.com/Graphs/Legends_(ggplot2) for more information.
theme(axis.text=element_text(size=12), axis.title=element_text(size=AxisSize,face="bold")) +
theme(plot.title = element_text(size=TitleSize,face="bold")) +
theme(panel.grid.major = element_line(colour=MajorGridColor, size=MajorGridSize)) +
theme(panel.grid.minor = element_line(colour=MinorGridColor, size=MinorGridSize)) +
theme(panel.background = element_rect(fill=Background, colour=Background)) +
layer(data=df,
# None of these worked for the following non-commented line:
#mapping=aes(x = carat, y = price, color = Legend),
#mapping=aes(x = carat, y = price, aes_string(color = Legend)),
#mapping=aes(x = carat, y = price, color = substitute(Legend))
# See http://stackoverflow.com/questions/32503843/using-a-function-parameter-in-ggplot-mapping-aes
# I fixed it by doing the names(df)[names(df) == Legend] <- 'Legend' above.
mapping=aes(x = carat, y = price, color = Legend),
stat="identity",
stat_params=list(),
geom="point",
geom_params=list(),
#position=position_identity()
position=position_jitter(width=0.3, height=0)
#position=position_dodge()
)
return(p1)
}
p1 <- ggplot_func(diamonds)
p1
p2 <- ggplot_func(diamonds, YMin = 5000, YMax = 15000)
p2
p3 <- ggplot_func(subset(diamonds, cut == "Premium"), Legend = "cut")
p3
p4 <- ggplot_func(diamonds, Legend = "clarity", PointColor = c("red", "blue", "green", "yellow", "grey", "black", "purple", "orange"))
p4
library("grid")
# You may need to use getwd() to find out where the "4diamonds.png" file will be put.
# You can use setwd() to set the current working directory.
png("4diamonds.png", width = 25, height = 20, units = "in", res = 72)
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2)))
# Print Plots
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(p2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
print(p3, vp = viewport(layout.pos.row = 2, layout.pos.col = 1))
print(p4, vp = viewport(layout.pos.row = 2, layout.pos.col = 2))
dev.off()
pwd
getwd()
---
title: "DV_RProject1"
author: "Ronly Leung, Karen Lee"
date: "September 15, 2015"
output: html_document
---
```{r}
source("../01 Data/DF_1.R", echo = TRUE)
---
title: "DV_RProject1"
author: "Ronly Leung, Karen Lee"
date: "September 15, 2015"
output: html_document
---
```{r}
source("C:/Users/ronly_000/Documents/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/DV_RProject1/DV_RProject1/01 Data/DF_1.R", echo = TRUE)
---
title: "DV_RProject1"
author: "Ronly Leung, Karen Lee"
date: "September 15, 2015"
output: html_document
---
---
title: "DV_RProject1"
author: "Ronly Leung, Karen Lee"
date: "September 15, 2015"
output: html_document
---
```{r message = FALSE}
require("jsonlite")
require("RCurl")
require(extrafont)
require(ggplot2)
```
```{r}
source("C:/Users/ronly_000/Documents/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/DV_RProject1/DV_RProject1/01 Data/DF_1.R", echo = TRUE)
```
## Data Frames
``` {r}
df1 <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from titanic"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_kwl377', PASS='orcl_kwl377', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
head(df1)
summary(df1)
---
title: "DV_RProject1"
author: "Ronly Leung, Karen Lee"
date: "September 15, 2015"
output: html_document
---
```{r message = FALSE}
require("jsonlite")
require("RCurl")
require(extrafont)
require(ggplot2)
```
## Data Frames
```{r}
##source("C:/Users/ronly_000/Documents/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/DV_RProject1/DV_RProject1/01 Data/DF_1.R", echo = TRUE)
source("../01 Data/DF_1.R", echo = TRUE)
```
---
title: "DV_RProject1"
author: "Ronly Leung, Karen Lee"
date: "September 15, 2015"
output: html_document
---
```{r message = FALSE}
require("jsonlite")
require("RCurl")
require(extrafont)
require(ggplot2)
```
## Data Frames
```{r}
source("C:/Users/ronly_000/Documents/utaustin/2015_fall/cs329e_elements_of_data_vis/DataVisualization/DV_RProject1/DV_RProject1/01 Data/DF_1.R", echo = TRUE)
##source("../01 Data/DF_1.R", echo = TRUE)
```
